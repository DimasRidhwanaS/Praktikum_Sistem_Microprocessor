;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $0000000E VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $0000000F VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000010 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000011 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000012 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000013 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000014 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000015 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000016 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000017 VOL: 0
	#endif
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;	flags -> R17
;void init_int(void) {
; 0000 0026 void init_int(void) {

	.CSEG
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0027 TIMSK1 |= (1<<TOIE1);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0028 
; 0000 0029 // Set timer mode to "Normal"
; 0000 002A TCCR1A &= (~(1<<WGM10)) & (~(1<<WGM11));
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002B TCCR1B &= (~(1<<WGM12)) & (~(1<<WGM13));
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002C 
; 0000 002D // Choosing the prescaller into 1024
; 0000 002E TCCR1B |= (1<<CS12) | (1<<CS10);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002F TCCR1B &= ~(1<<CS11);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0030 TCCR1A |= (1<<COM1A0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0031 TCCR1A &= ~(1<<COM1A1);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0032 
; 0000 0033 // Load period to get 1 second clock
; 0000 0034 // as we choose 16MHz timer, clock freq will be 16M/1024 = 15625 Hz
; 0000 0035 // then the time for each tick is 1/F = 64us
; 0000 0036 // number of count to get 1000ms    -> 1000ms/64us = 15625
; 0000 0037 // we need to substract with the maximum value to get the right timing
; 0000 0038 // as Timer1 is a 16-bit timer which is 2^16, the maximum value is 65535,
; 0000 0039 // hence period = 65535-15625 = 49910
; 0000 003A // Initial timer start value
; 0000 003B TCNT1H = TCNT_HIGH;      // This one probably needs to be defined as TNCTH and TNCTL
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003C TCNT1L = TCNT_LOW;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003D 
; 0000 003E // Timer Period
; 0000 003F OCR1AH = 0x3D;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0040 OCR1AL = 0x09;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0041 
; 0000 0042 
; 0000 0043 #asm("sei")         // if this doesnt work, we can manually set up the global interrupt enable
;PCODE: $00000039 VOL: 0
; 0000 0044 
; 0000 0045 //-------------------------------------------------------------------------------------------------
; 0000 0046 //set prescaler 1024
; 0000 0047 // TIMSK1=0b000000;
; 0000 0048 // TCCR1B=0b0000XXXX;
; 0000 0049 
; 0000 004A // TCNT1H=TCNT_HIGH;
; 0000 004B // TCNT1L=TCNT_LOW;
; 0000 004C 
; 0000 004D //Enable Interrupt
; 0000 004E // #asm("sei")         // if this doesnt work, we can manually set up the global interrupt enable
; 0000 004F }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;interrupt [14] void timer1_ovf_isr(void) {
; 0000 0051 interrupt [14] void timer1_ovf_isr(void) {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0052 TCNT1H = TCNT_HIGH;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0053 TCNT1L = TCNT_LOW;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0054 OCR1AH = 0x3D;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0055 OCR1AL = 0x09;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0056 state++;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0057 }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;void main(void) {
; 0000 0059 void main(void) {
;PCODE: $0000004C VOL: 0
; 0000 005A init_int();
;PCODE: $0000004D VOL: 0
; 0000 005B while (1) {
;PCODE: $0000004E VOL: 0
; 0000 005C PORTB = 0b10101010;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005D delay_ms(100);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 005E PORTB = 0b01010101;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005F delay_ms(100);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0060 
; 0000 0061 }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0062 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
