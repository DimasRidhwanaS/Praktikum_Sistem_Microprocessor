;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void init_timer(void) {
; 0000 0021 void init_timer(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0022 //mode operasi CTC, sumber clock prescaler 256
; 0000 0023 TCCR1A = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0024 TCCR1B = 0b00001100;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0025 
; 0000 0026 //overflow interrupt disable
; 0000 0027 TIMSK1 |=(0<<TOIE1);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0028 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;void Delay(void) {
; 0000 002A void Delay(void) {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002B //Overflow interrupt enable
; 0000 002C TIMSK1 |= (1<<TOIE1);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002D 
; 0000 002E //Counter start value
; 0000 002F TCNT1H = 0;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0030 TCNT1L = 0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0031 
; 0000 0032 // as we choose 16MHz timer, clock freq will be 16M/256 = 62500 Hz
; 0000 0033 // then the time for each tick is 1/F = 16us
; 0000 0034 // number of count to get 1 second    -> 1000ms/16us = 62500
; 0000 0035 // we need to substract with the maximum value to get the right timing
; 0000 0036 // as Timer1 is a 16-bit timer which is 2^16, the maximum value is 65535,
; 0000 0037 // hence period = 65535-62500 = 3035
; 0000 0038 //Set OCR value for 1 Hz
; 0000 0039 OCR1AH = 0x7A;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003A OCR1AL = 0x12;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003B 
; 0000 003C //Compare Match TCNT1 dan OCR1A
; 0000 003D loop_until_bit_is_set(TIFR1,OCF1A);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003E //Reset Flag
; 0000 003F TIFR1 |= (1<<OCF1A);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0040 //overflow interrupt disable
; 0000 0041 TIMSK1 |= (0<<TOIE1);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0042 }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;void main(void) {
; 0000 0044 void main(void) {
;PCODE: $00000035 VOL: 0
; 0000 0045 DDRD = 0xFF;                        // All PORTD is an output
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0046 PORTD = 0b00001111;                 // Initial led condition
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0047 
; 0000 0048 while (1){
;PCODE: $0000003A VOL: 0
; 0000 0049 init_timer();                   // Start the timer
;PCODE: $0000003B VOL: 0
; 0000 004A PORTD = 0b00001111;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004B Delay();
;PCODE: $0000003E VOL: 0
; 0000 004C PORTD = 0b11110000;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 004D Delay();
;PCODE: $00000041 VOL: 0
; 0000 004E }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004F }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
